#
#  This makefile was generated by mm.
#


# Project-specific definitions
PROJECT := myproject

# Another perverted GNU make trick - recursive wildcard evaluation
# Usage is $(call rwildcard,dirpath,pattern)
# Return is a list of files matching pattern in the directory tree rooted at dirpath
# See http://blog.jgc.org/2011/07/gnu-make-recursive-wildcard-function.html
rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

PROJECTROOT := $(abspath $(dir $(firstword $(wildcard setup.py ../setup.py ../../setup.py ../../../setup.py))))
LOCALROOT := $(abspath .)
THISMAKEFILE := $(abspath $(firstword $(MAKEFILE_LIST)))

# Specific version of python to be used for the installation
# PYTHON can be over ruled from the command line, or in sub-makes
PYTHON := python
# The list of python versions can be restricted (or extended) in makestart
PYTHONLIST := python2.5 python2.6 python2.7

# Default style checker
CHECKSTYLE = pep8 -r

# Checks that python modules are in allowed locations
PYTHON_MODULES = $(A)/scripts/python_modules.py --report=path

# generates Python documentation
DOCGEN = pydoc -w >&/dev/null

# use rsync to copy files around
RSYNC = rsync -Cqpotr

LIB := $(PROJECTROOT)/lib.local/
# System-specified directories
ifeq ($(T),)
  # Environment does not define T, so assume a non-CADC platform
  RPS := $(wildcard ~/ )
  A = $(RPS)
  INSTALLSWITCH =
else
  # Envirnment defines T, so assume a CADC platform
  INSTALLSWITCH = --install-base=$(LIB)
endif
LOGS := $(PROJECTROOT)/logs
DOCAPI = $(PROJECTROOT)/www/doc/api/$(PROJECT)

PACKAGEPATHLIST := $(abspath $(subst /__init__.py,,$(call rwildcard,$(PROJECTROOT)/,__init__.py)))
PACKAGENAMELIST := $(notdir $(PACKAGEPATHLIST))

# Mangle python path names into doc names
PYLIST := $(filter-out test% lib.local% www% logs% setup.py,$(subst $(PROJECTROOT)/,,$(call rwildcard,$(PROJECTROOT)/,*.py)))
DOCPATHLIST := $(subst /__init__.py,,$(PYLIST))
DOCSOURCELIST := $(subst ..,,$(subst /,.,$(basename $(DOCPATHLIST))))
DOCLIST := $(addsuffix .html,$(DOCSOURCELIST))

SCRIPTLIST := $(notdir $(wildcard $(PROJECTROOT)/scripts/*))
SCRIPTDOCLIST := $(filter %.py,$(SCRIPTLIST))

TESTLIST := $(notdir $(wildcard $(PROJECTROOT)/test/*))
TESTPATH := $(foreach t,$(TESTLIST),$(wildcard $(PROJECTROOT)/test/$(t)/test*.py))

CHECKLIST = $(addprefix check,$(notdir $(PYLIST)))
 
PYTHON := python2.7
PYTHONLIST := python2.7

project := caom2repoClient

TARGETS = x86_linux
TARGET_BLACKLIST = x86_fedora5_32
#
#  makestart end
#

CURRENT_TRANSITION=current.transition
include $(A)/compilers/$(CURRENT_TRANSITION)

local:
L=$(RPS)/lib.$(T)
#ifndef REL_TARGETS
ifeq ($(REL_TARGETS),)
    REL_TARGETS = $(TARGETS)
endif
release:
ifeq ($(STREAM),current)
	@echo "Error: Cannot do make release in the \"current\" stream."
	@exit 1
endif
	@$(MAKE) RELEASE_BUILD=T $(REL_TARGETS)
makemake: test_targets

CCFLAGS +=  $(addprefix -I, $(INCLUDE_PATH))
CFLAGS +=  $(addprefix -I, $(INCLUDE_PATH))
FFLAGS +=  $(addprefix -I, $(INCLUDE_PATH))
LINTFLAGS :=  $(addprefix -I, $(INCLUDE_PATH)) $(LINTFLAGS)

.PHONY: test
test:
	echo $(xx)

buildpaths:
	@echo "lib path     : $(LIBPATH)"
	@echo "include path : $(INCLUDE_PATH)"

ifneq (,$(findstring -b,$(FLAGS)))
x := $(shell mkdir -p bin.$(T) obj.$(T))
endif

ifneq (,$(findstring -l,$(FLAGS)))
x := $(shell mkdir -p lib.$(T) obj.$(T))
endif

objects: $(OBJECTS)


T_TARGETS = $(shell echo $(REL_TARGETS) | sed -e 's/\([ ^]*[^_ ][^_ ]*_[^_ $$]*\)[^ ]*/\1/g')
test_targets:
	@echo "rel targets $(REL_TARGETS)"
	@echo "t targets $(T_TARGETS)"
ifneq ($(words $(TARGETS)),$(words $(sort $(TARGETS))))
	@echo "Makestart setup error:"
	@echo "  There are duplicate targets in the TARGETS make symbol."
	@exit 1
endif
ifneq ($(words $(TARGETS)),$(words $(sort $(TARGETS) $(REL_TARGETS))))
	@echo "Makestart setup error:"
	@echo "  There are targets in REL_TARGETS not in the TARGETS list."
	@exit 1
endif
#
# commented out for fedora8 testing only - SGo
#
#ifneq ($(words $(T_TARGETS)),$(words $(sort $(T_TARGETS))))
#ifeq ($(findstring -b,$(FLAGS)),-b)
##	@echo "Makestart setup error:"
#	@echo "  There is more than one target in REL_TARGETS that release "
#	@echo "  to the same architecture (or REL_TARGETS is not defined)."
#	@exit 1
#endif
#endif


#
#  The following targets cause libraries to be built when the library
#  test program is built, or cause objects files to be built when the
#  program test program is built.
#

ifeq ($(notdir $(PWD)),test)
ifeq ($(wildcard ../lib.$(T) ),../lib.$(T))
local: buildlib
buildlib:
	@cd ..; $(MAKE) local 
endif
ifeq ($(wildcard ../bin.$(T) ),../bin.$(T))
local: buildobj
buildobj:
	@cd ..; $(MAKE) objects
endif
endif

DEFAULT_TARGET=$(firstword $(TARGETS))
DEFAULT_HOST=$(shell echo $(DEFAULT_TARGET)_HOST | tr '[a-z]' '[A-Z]')
showDepend:
ifeq (,$(findstring $(T),$(TARGETS)))
	ssh -n $($(DEFAULT_HOST)) "setenv PROJECT $(PROJECT); setenv STREAM $(STREAM); source $(M)/dev.rc; cd $(shell pwd); make -nd RELEASE_ROOT=$(RELEASE_ROOT) MODULE_VERSION=$(MODULE_VERSION) T=$(DEFAULT_TARGET) local" 
else
	make -nd local
endif

show_rel_targets:
	@echo "$(REL_TARGETS)"


.PHONY: local lint all release test_targets show_rel_targets
.PHONY: local default clean init build test

# run make on all platforms
ifeq ($(T),)
.PHONY:	all
all:	local
else
.PHONY:	all
all: $(TARGETS)
endif

.PNONY: $(TARGETS)
$(TARGETS):
	ssh $$$(shell echo $@ | tr '[:lower:]' '[:upper:]')_HOST 'cd $(PWD); make local'

# run make for all versions of python
local: $(PYTHONLIST)

# By default, run make for every version of python separately
.PHONY: $(PYTHONLIST)
$(PYTHONLIST):
	$(MAKE) -f $(THISMAKEFILE) PYTHON=$@ PROJECTROOT=$(PROJECTROOT) default

default:	init build

.PHONY: show
show:
	@echo PROJECTROOT = $(PROJECTROOT)
	@echo LOCALROOT = $(LOCALROOT)
	@echo THISMAKEFILE = $(THISMAKEFILE)
	@echo PYLIST = $(PYLIST)
	@echo DOCLIST = $(DOCLIST)
	@echo TESTLIST = $(TESTLIST)
	@echo TESTPATH = $(TESTPATH)
	@echo CHECKLIST = $(CHECKLIST)

.PHONY:	init
init:	clean
	mkdir -p $(LIB)
	mkdir -p $(LOGS)
	mkdir -p $(DOCAPI)

.PHONY:	clean
clean:
	/bin/rm -fr $(LIB)
	/bin/rm -fr $(LOGS)
	/bin/rm -fr $(DOCAPI)

#----------------------------------
# BUILD TARGETS
#----------------------------------
.PHONY:	build compile build_python build_doc build_scripts build_config build_dtd

# compile is a synonym for build
compile: build

build:  build_python build_doc

build_python:
	cd $(PROJECTROOT)/; $(PYTHON) setup.py build --build-base=$(LIB)

#----------------------------------
# BUILD_DOC TARGETS
#----------------------------------
#.PHONY:	build_doc
build_doc:	build_python  $(addprefix $(DOCAPI)/,$(DOCLIST)) $(addprefix $(DOCAPI)/,$(addsuffix .html,$(basename $(SCRIPTDOCLIST))))

# Create document targets for each individual package and module
define doc_template
$(DOCAPI)/$(1).html:	$(wildcard $(subst .,/,$(1)).py $(subst .,/,$(1))/__init__.py)
	cd $(DOCAPI); export PYTHONPATH=$(abspath $(LIB)/lib); $(DOCGEN) $(1)
endef
$(foreach p,$(DOCSOURCELIST),$(eval $(call doc_template,$(p))))

define scriptdoc_template
$(DOCAPI)/$(2).html:	$(PROJECTROOT)/scripts/$(1)
	cd $(DOCAPI); export PYTHONPATH=$(abspath $(LIB)/lib); $(DOCGEN) $^
#	/bin/rm $(PROJECTROOT)/scripts/*.pyc
endef
$(foreach p,$(SCRIPTDOCLIST),$(eval $(call scriptdoc_template,$(p),$(basename $(p)))))

#----------------------------------
# TEST TARGETS
#----------------------------------
.PHONY: test $(addsuffix Test,$(TESTLIST))

define generate_tests
$(1)Test:	$(2)

.PHONY:	$(2)
$(2):
	cd $(PROJECTROOT)/test/$(1); export PYTHONPATH=$(abspath $(LIB)/lib); $(PYTHON) $$@
endef
$(foreach t,$(TESTLIST),$(eval $(call generate_tests,$(t),$(strip $(notdir $(wildcard $(PROJECTROOT)/test/$(t)/test*.py))))))

#----------------------------------
# CHECKSTYLE TARGETS
#----------------------------------
.PHONY: checkstyle $(CHECKLIST)
checkstyle:	$(CHECKLIST)

define generate_checks
.PHONY:	$(2)

$(2):
	-$(CHECKSTYLE) $(1)
endef

$(foreach c,$(PYLIST),$(eval $(call generate_checks,$(c),$(addprefix check,$(notdir $(c))))))
	
#----------------------------------
# CLASSPATH TARGETS
#----------------------------------
.PHONY:	classpath
classpath:
	export PYTHONPATH=$(LIB)/lib; \
	$(PYTHON_MODULES) $(PACKAGEPATHLIST) \
	$(addprefix $(PROJECTROOT)/scripts/,$(SCRIPTDOCLIST)) \
	$(TESTPATH)
